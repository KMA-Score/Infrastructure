version: '3.8'

services:
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /etc/machine-id:/etc/machine-id:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - observability

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    command:
      - --docker_only
    networks:
      - observability

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
      - ../observability/prometheus:/etc/prometheus
    restart: unless-stopped
    depends_on:
      - node-exporter
      - cadvisor
    ports:
      - 9090:9090
    networks:
      - observability
      - skma

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ../observability/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    networks:
      - observability

  loki:
    image: grafana/loki:latest
    command: -config.file=/etc/loki/loki.yaml
    ports:
      - "3100:3100" # loki needs to be exposed so it receives logs
    user: "0"
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    volumes:
      - ../observability/loki/loki.yaml:/etc/loki/loki.yaml
      - loki_data:/tmp/loki
    networks:
      - observability
      - skma

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ../observability/promtail/config.yaml:/etc/promtail/config.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    networks:
      - observability
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ../observability/otel/config.yaml:/etc/otelcol-contrib/config.yaml
    depends_on:
      - loki
      - tempo
      - prometheus
    networks:
      - observability
      - skma

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ../observability/grafana:/etc/grafana/provisioning/
    restart: unless-stopped
    networks:
      - observability
      - skma